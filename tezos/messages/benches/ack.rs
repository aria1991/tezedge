// Copyright (c) SimpleStaking and Tezedge Contributors
// SPDX-License-Identifier: MIT

use criterion::{criterion_group, criterion_main, Criterion};
use tezos_messages::p2p::encoding::ack::AckMessage;

mod decoding_bench;
use decoding_bench::*;

const DATA: &str = "\
01000100000193000000133231332E3233392E3230312E37393A393733320000001237352E313535\
2E36352E3137313A393733320000001334362E3234352E3137392E3136323A393733320000001235\
302E32312E3136372E3231373A393733320000001331382E3138352E3136322E3134343A39373332\
000000133230392E3135392E3134372E37393A39373332000000133130372E3135312E3139302E31\
313A39373332000000123130372E3135312E3139302E363A393733320000001337382E3133372E32\
31352E3133363A393733330000001133352E3138312E33392E31343A39373332000000133130372E\
3135312E3139302E31363A393733320000001231342E3139322E3230392E38343A39373332000000\
133131392E3134372E3231322E31313A39373332000000113231322E34302E34372E31343A393733\
32000000123130372E3135312E3139302E393A393733320000001133342E39352E35372E3134393A\
39373332000000133133382E3230312E37342E3137393A39373332000000133230332E3234332E32\
392E3133373A39373332\
";


fn ack_benchmark(c: &mut Criterion) {
    let data =  hex::decode(DATA).unwrap();
    bench_decode_serde_nom_raw::<AckMessage>(c, "ack", data)
}

criterion_group! {
    name = benches;
    config = Criterion::default();
    targets = ack_benchmark
}

criterion_main!(benches);
